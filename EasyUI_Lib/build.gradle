import proguard.gradle.ProGuardTask

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven' // 增加
//apply from: 'config.gradle'
group='com.qinssen.easyui'
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "0.0.1"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion '28.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'libs')
        implementation 'com.android.support:appcompat-v7:28.0.0'
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
        implementation 'com.daimajia.easing:library:2.0@aar'
        implementation 'com.daimajia.androidanimations:library:2.2@aar'
        implementation 'com.android.support:recyclerview-v7:28.0.0'
    }
}

task gen_aar(dependsOn: ':EasyUI_Lib:assembleRelease') {

    doLast {
        //把所有依赖的.aar库里包含的classes.jar都拷贝到build/aar/libs下，并重命名以不被覆盖
        def jar_name
        def aar_path
        def dest_dir = buildDir.getPath() + "/aar"
        configurations.compile.findAll {
            it.getName().endsWith(".aar")
        }.collect {
            aar_path = it.getPath()
            jar_name = "libs/" + it.getName().replace(".aar", ".jar")
            copy {
                from zipTree(aar_path)
                into dest_dir
                include "**/*"
                rename 'classes.jar', jar_name
            }
        }
    }


}

task fataar(dependsOn: [gen_aar, gen_aar]) {

    doLast {
        task(obfuse_classes_jar, type: ProGuardTask) {
            //把build/aar/libs/*.jar混淆后生成build/aar/classes.jar
            configuration "proguard-rules.pro"
            injars buildDir.getPath() + "/aar/libs"
            outjars buildDir.getPath() + "/aar/classes.jar"
            libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
            libraryjars "${System.getProperty('java.home')}/Contents/Classes/classes.jar"
            libraryjars System.getenv("ANDROID_HOME") + "/platforms/android-19/android.jar"
        }.execute()
        task(gen_aar, type: Zip) {
            //把生成最终的aar包，注意libs目录需要被排除
            def dest_dir = buildDir.getPath() + "/aar/"
            baseName = "mysdk-all"
            extension = "aar"
            destinationDir = file(buildDir.getPath())
            from dest_dir
            exclude "libs"
        }.execute()
    }

//    apply from: 'maven.gradle'

}